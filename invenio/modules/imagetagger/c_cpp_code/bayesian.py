# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bayesian', [dirname(__file__)])
        except ImportError:
            import _bayesian
            return _bayesian
        if fp is not None:
            try:
                _mod = imp.load_module('_bayesian', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bayesian = swig_import_helper()
    del swig_import_helper
else:
    import _bayesian
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bayesian.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _bayesian.SwigPyIterator_value(self)
    def incr(self, n=1): return _bayesian.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _bayesian.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _bayesian.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _bayesian.SwigPyIterator_equal(self, *args)
    def copy(self): return _bayesian.SwigPyIterator_copy(self)
    def next(self): return _bayesian.SwigPyIterator_next(self)
    def __next__(self): return _bayesian.SwigPyIterator___next__(self)
    def previous(self): return _bayesian.SwigPyIterator_previous(self)
    def advance(self, *args): return _bayesian.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _bayesian.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _bayesian.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _bayesian.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _bayesian.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _bayesian.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _bayesian.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _bayesian.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _bayesian.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bayesian.StringVector___nonzero__(self)
    def __bool__(self): return _bayesian.StringVector___bool__(self)
    def __len__(self): return _bayesian.StringVector___len__(self)
    def pop(self): return _bayesian.StringVector_pop(self)
    def __getslice__(self, *args): return _bayesian.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _bayesian.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _bayesian.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _bayesian.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _bayesian.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _bayesian.StringVector___setitem__(self, *args)
    def append(self, *args): return _bayesian.StringVector_append(self, *args)
    def empty(self): return _bayesian.StringVector_empty(self)
    def size(self): return _bayesian.StringVector_size(self)
    def clear(self): return _bayesian.StringVector_clear(self)
    def swap(self, *args): return _bayesian.StringVector_swap(self, *args)
    def get_allocator(self): return _bayesian.StringVector_get_allocator(self)
    def begin(self): return _bayesian.StringVector_begin(self)
    def end(self): return _bayesian.StringVector_end(self)
    def rbegin(self): return _bayesian.StringVector_rbegin(self)
    def rend(self): return _bayesian.StringVector_rend(self)
    def pop_back(self): return _bayesian.StringVector_pop_back(self)
    def erase(self, *args): return _bayesian.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _bayesian.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bayesian.StringVector_push_back(self, *args)
    def front(self): return _bayesian.StringVector_front(self)
    def back(self): return _bayesian.StringVector_back(self)
    def assign(self, *args): return _bayesian.StringVector_assign(self, *args)
    def resize(self, *args): return _bayesian.StringVector_resize(self, *args)
    def insert(self, *args): return _bayesian.StringVector_insert(self, *args)
    def reserve(self, *args): return _bayesian.StringVector_reserve(self, *args)
    def capacity(self): return _bayesian.StringVector_capacity(self)
    __swig_destroy__ = _bayesian.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _bayesian.StringVector_swigregister
StringVector_swigregister(StringVector)

class TrainingArguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrainingArguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrainingArguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imageList"] = _bayesian.TrainingArguments_imageList_set
    __swig_getmethods__["imageList"] = _bayesian.TrainingArguments_imageList_get
    if _newclass:imageList = _swig_property(_bayesian.TrainingArguments_imageList_get, _bayesian.TrainingArguments_imageList_set)
    __swig_setmethods__["imageDirectory"] = _bayesian.TrainingArguments_imageDirectory_set
    __swig_getmethods__["imageDirectory"] = _bayesian.TrainingArguments_imageDirectory_get
    if _newclass:imageDirectory = _swig_property(_bayesian.TrainingArguments_imageDirectory_get, _bayesian.TrainingArguments_imageDirectory_set)
    __swig_setmethods__["trainingFilename"] = _bayesian.TrainingArguments_trainingFilename_set
    __swig_getmethods__["trainingFilename"] = _bayesian.TrainingArguments_trainingFilename_get
    if _newclass:trainingFilename = _swig_property(_bayesian.TrainingArguments_trainingFilename_get, _bayesian.TrainingArguments_trainingFilename_set)
    __swig_setmethods__["distanceMatrix"] = _bayesian.TrainingArguments_distanceMatrix_set
    __swig_getmethods__["distanceMatrix"] = _bayesian.TrainingArguments_distanceMatrix_get
    if _newclass:distanceMatrix = _swig_property(_bayesian.TrainingArguments_distanceMatrix_get, _bayesian.TrainingArguments_distanceMatrix_set)
    __swig_setmethods__["maxRank"] = _bayesian.TrainingArguments_maxRank_set
    __swig_getmethods__["maxRank"] = _bayesian.TrainingArguments_maxRank_get
    if _newclass:maxRank = _swig_property(_bayesian.TrainingArguments_maxRank_get, _bayesian.TrainingArguments_maxRank_set)
    __swig_setmethods__["nExtrapersonal"] = _bayesian.TrainingArguments_nExtrapersonal_set
    __swig_getmethods__["nExtrapersonal"] = _bayesian.TrainingArguments_nExtrapersonal_get
    if _newclass:nExtrapersonal = _swig_property(_bayesian.TrainingArguments_nExtrapersonal_get, _bayesian.TrainingArguments_nExtrapersonal_set)
    __swig_setmethods__["nIntrapersonal"] = _bayesian.TrainingArguments_nIntrapersonal_set
    __swig_getmethods__["nIntrapersonal"] = _bayesian.TrainingArguments_nIntrapersonal_get
    if _newclass:nIntrapersonal = _swig_property(_bayesian.TrainingArguments_nIntrapersonal_get, _bayesian.TrainingArguments_nIntrapersonal_set)
    __swig_setmethods__["cutOffMode"] = _bayesian.TrainingArguments_cutOffMode_set
    __swig_getmethods__["cutOffMode"] = _bayesian.TrainingArguments_cutOffMode_get
    if _newclass:cutOffMode = _swig_property(_bayesian.TrainingArguments_cutOffMode_get, _bayesian.TrainingArguments_cutOffMode_set)
    __swig_setmethods__["cutOff"] = _bayesian.TrainingArguments_cutOff_set
    __swig_getmethods__["cutOff"] = _bayesian.TrainingArguments_cutOff_get
    if _newclass:cutOff = _swig_property(_bayesian.TrainingArguments_cutOff_get, _bayesian.TrainingArguments_cutOff_set)
    __swig_setmethods__["dropNVectors"] = _bayesian.TrainingArguments_dropNVectors_set
    __swig_getmethods__["dropNVectors"] = _bayesian.TrainingArguments_dropNVectors_get
    if _newclass:dropNVectors = _swig_property(_bayesian.TrainingArguments_dropNVectors_get, _bayesian.TrainingArguments_dropNVectors_set)
    def __init__(self): 
        this = _bayesian.new_TrainingArguments()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bayesian.delete_TrainingArguments
    __del__ = lambda self : None;
TrainingArguments_swigregister = _bayesian.TrainingArguments_swigregister
TrainingArguments_swigregister(TrainingArguments)

class PredictArguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PredictArguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PredictArguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["intrapersonalTrainingFile"] = _bayesian.PredictArguments_intrapersonalTrainingFile_set
    __swig_getmethods__["intrapersonalTrainingFile"] = _bayesian.PredictArguments_intrapersonalTrainingFile_get
    if _newclass:intrapersonalTrainingFile = _swig_property(_bayesian.PredictArguments_intrapersonalTrainingFile_get, _bayesian.PredictArguments_intrapersonalTrainingFile_set)
    __swig_setmethods__["extrapersonalTrainingFile"] = _bayesian.PredictArguments_extrapersonalTrainingFile_set
    __swig_getmethods__["extrapersonalTrainingFile"] = _bayesian.PredictArguments_extrapersonalTrainingFile_get
    if _newclass:extrapersonalTrainingFile = _swig_property(_bayesian.PredictArguments_extrapersonalTrainingFile_get, _bayesian.PredictArguments_extrapersonalTrainingFile_set)
    __swig_setmethods__["imageNamesFile"] = _bayesian.PredictArguments_imageNamesFile_set
    __swig_getmethods__["imageNamesFile"] = _bayesian.PredictArguments_imageNamesFile_get
    if _newclass:imageNamesFile = _swig_property(_bayesian.PredictArguments_imageNamesFile_get, _bayesian.PredictArguments_imageNamesFile_set)
    __swig_setmethods__["imageDirectory"] = _bayesian.PredictArguments_imageDirectory_set
    __swig_getmethods__["imageDirectory"] = _bayesian.PredictArguments_imageDirectory_get
    if _newclass:imageDirectory = _swig_property(_bayesian.PredictArguments_imageDirectory_get, _bayesian.PredictArguments_imageDirectory_set)
    __swig_setmethods__["maxLikelihoodDistDirectory"] = _bayesian.PredictArguments_maxLikelihoodDistDirectory_set
    __swig_getmethods__["maxLikelihoodDistDirectory"] = _bayesian.PredictArguments_maxLikelihoodDistDirectory_get
    if _newclass:maxLikelihoodDistDirectory = _swig_property(_bayesian.PredictArguments_maxLikelihoodDistDirectory_get, _bayesian.PredictArguments_maxLikelihoodDistDirectory_set)
    __swig_setmethods__["bayesianDistDirectory"] = _bayesian.PredictArguments_bayesianDistDirectory_set
    __swig_getmethods__["bayesianDistDirectory"] = _bayesian.PredictArguments_bayesianDistDirectory_get
    if _newclass:bayesianDistDirectory = _swig_property(_bayesian.PredictArguments_bayesianDistDirectory_get, _bayesian.PredictArguments_bayesianDistDirectory_set)
    __swig_setmethods__["distanceMatrix"] = _bayesian.PredictArguments_distanceMatrix_set
    __swig_getmethods__["distanceMatrix"] = _bayesian.PredictArguments_distanceMatrix_get
    if _newclass:distanceMatrix = _swig_property(_bayesian.PredictArguments_distanceMatrix_get, _bayesian.PredictArguments_distanceMatrix_set)
    __swig_setmethods__["maxRank"] = _bayesian.PredictArguments_maxRank_set
    __swig_getmethods__["maxRank"] = _bayesian.PredictArguments_maxRank_get
    if _newclass:maxRank = _swig_property(_bayesian.PredictArguments_maxRank_get, _bayesian.PredictArguments_maxRank_set)
    __swig_setmethods__["N"] = _bayesian.PredictArguments_N_set
    __swig_getmethods__["N"] = _bayesian.PredictArguments_N_get
    if _newclass:N = _swig_property(_bayesian.PredictArguments_N_get, _bayesian.PredictArguments_N_set)
    def __init__(self): 
        this = _bayesian.new_PredictArguments()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bayesian.delete_PredictArguments
    __del__ = lambda self : None;
PredictArguments_swigregister = _bayesian.PredictArguments_swigregister
PredictArguments_swigregister(PredictArguments)

class TestArguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestArguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TestArguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eyeFile"] = _bayesian.TestArguments_eyeFile_set
    __swig_getmethods__["eyeFile"] = _bayesian.TestArguments_eyeFile_get
    if _newclass:eyeFile = _swig_property(_bayesian.TestArguments_eyeFile_get, _bayesian.TestArguments_eyeFile_set)
    __swig_setmethods__["imageFile"] = _bayesian.TestArguments_imageFile_set
    __swig_getmethods__["imageFile"] = _bayesian.TestArguments_imageFile_get
    if _newclass:imageFile = _swig_property(_bayesian.TestArguments_imageFile_get, _bayesian.TestArguments_imageFile_set)
    def __init__(self): 
        this = _bayesian.new_TestArguments()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bayesian.delete_TestArguments
    __del__ = lambda self : None;
TestArguments_swigregister = _bayesian.TestArguments_swigregister
TestArguments_swigregister(TestArguments)

class BayesianRecognizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BayesianRecognizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BayesianRecognizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _bayesian.new_BayesianRecognizer()
        try: self.this.append(this)
        except: self.this = this
    def train(self, *args): return _bayesian.BayesianRecognizer_train(self, *args)
    def predict(self, *args): return _bayesian.BayesianRecognizer_predict(self, *args)
    def load(self, *args): return _bayesian.BayesianRecognizer_load(self, *args)
    def save(self, *args): return _bayesian.BayesianRecognizer_save(self, *args)
    def getIRho(self): return _bayesian.BayesianRecognizer_getIRho(self)
    def getERho(self): return _bayesian.BayesianRecognizer_getERho(self)
    def setIRho(self, *args): return _bayesian.BayesianRecognizer_setIRho(self, *args)
    def setERho(self, *args): return _bayesian.BayesianRecognizer_setERho(self, *args)
    __swig_destroy__ = _bayesian.delete_BayesianRecognizer
    __del__ = lambda self : None;
BayesianRecognizer_swigregister = _bayesian.BayesianRecognizer_swigregister
BayesianRecognizer_swigregister(BayesianRecognizer)

# This file is compatible with both classic and new-style classes.


